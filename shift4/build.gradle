plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'maven-publish'
    id 'signing'
}

def envProps = new Properties()
def envPropsFile = rootProject.file("env.properties")
if (envPropsFile.exists()) {
    envProps.load(new FileInputStream(envPropsFile))
} else {
    throw new GradleException("Missing env.properties file with environment configuration")
}

android {
    namespace 'com.shift4'

    defaultConfig {
        aarMetadata {
            minCompileSdk = 21
        }
        compileSdk 35
        minSdkVersion 21
        targetSdkVersion 35
        versionCode 4
        versionName rootProject.version

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildFeatures {
        buildConfig true
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()
            ignoreFailures = true
            reports {
//                junitXml.enabled = true
            }
        }
        unitTests.includeAndroidResources = true
    }

    buildTypes {
        debug {
            buildConfigField("long", "VERSION_CODE", "${defaultConfig.versionCode}")
            buildConfigField("String", "VERSION_NAME", "\"${defaultConfig.versionName}\"")
            buildConfigField("String", "API_URL", "\"${envProps['API_URL']}\"")
            buildConfigField("String", "BACKOFFICE_URL", "\"${envProps['BACKOFFICE_URL']}\"")
            buildConfigField("String", "JS_URL", "\"${envProps['JS_URL']}\"")

            minifyEnabled false
            shrinkResources false
            consumerProguardFiles 'consumer-rules.pro'
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            buildConfigField("long", "VERSION_CODE", "${defaultConfig.versionCode}")
            buildConfigField("String", "VERSION_NAME", "\"${defaultConfig.versionName}\"")
            buildConfigField("String", "API_URL", "\"${envProps['API_URL']}\"")
            buildConfigField("String", "BACKOFFICE_URL", "\"${envProps['BACKOFFICE_URL']}\"")
            buildConfigField("String", "JS_URL", "\"${envProps['JS_URL']}\"")

            minifyEnabled false
            shrinkResources false
            consumerProguardFiles 'consumer-rules.pro'
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = "11"
    }

    kotlin {
        jvmToolchain {
            languageVersion.set(JavaLanguageVersion.of("11"))
        }
    }
    apply plugin: 'maven-publish'
    tasks.withType(Test) {
        maxParallelForks = Runtime.runtime.availableProcessors()
    }
    publishing {
        singleVariant('release') {
            withSourcesJar()
        }
    }

    dependencies {
        //Android
        implementation 'androidx.core:core-ktx:1.16.0'
        implementation 'com.google.android.material:material:1.12.0'
        implementation "androidx.fragment:fragment-ktx:1.8.8"
        implementation("androidx.activity:activity-compose:1.10.1")
        implementation("androidx.compose.runtime:runtime-livedata:1.8.3")

        //Retrofit
        implementation 'com.squareup.okhttp3:okhttp:4.11.0'
        implementation 'com.squareup.retrofit2:retrofit:2.9.0'
        implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
        implementation 'com.google.code.gson:gson:2.10.1'

        //Coroutines
        implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3'

        //External
        implementation 'com.hbb20:ccp:2.7.3'
    }
}

publishing {
    publications {
        release(MavenPublication) {
            groupId = 'com.shift4'
            artifactId = 'shift4-android'
            version = rootProject.version

            pom {
                name = 'Shift4 Android SDK'
                description = 'Android client library for Shift4'
                url = 'https://dev.shift4.com/'
                licenses {
                    license {
                        name = 'MIT'
                        url = 'http://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        name = 'Shift4'
                        email = 'devsupport@shift4.com'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:shift4developer/shift4-android.git'
                    developerConnection = 'scm:git:git@github.com:shift4developer/shift4-android.git'
                    url = 'https://github.com/shift4developer/shift4-android.git'
                }
            }
            
            afterEvaluate {
                from components.release
            }
        }
    }

    repositories {
        maven {
            name = 'jreleaser'
            url = "${rootProject.buildDir}/jreleaser/repo"
        }
    }
}

jreleaser {
    project {
        name = 'shift4-android'
        description = 'Android client library for Shift4'
        website = 'https://dev.shift4.com/'
        authors = ['Shift4']
        license = 'MIT'
        java {
            groupId = 'com.shift4'
            artifactId = 'shift4-android'
        }
    }
    signing {
        active = 'ALWAYS'
        armored = true
        verify = false
    }
    deploy {
        maven {
            mavenCentral {
                releases {
                    active = 'ALWAYS'
                    verifyPom = false
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    snapshotSupported = false
                    applyMavenCentralRules = true
                    namespace = 'com.shift4'
                    stagingRepository("${rootProject.buildDir}/jreleaser/repo")
                }
            }
        }
    }
}

signing {
    useInMemoryPgpKeys(
            System.getenv('JRELEASER_GPG_SECRET_KEY'),
            System.getenv('JRELEASER_GPG_PASSPHRASE')
    )
    sign publishing.publications.release
}


if (project.file("src/test/dependencies.gradle").exists()) {
    apply from: 'src/test/dependencies.gradle'
}